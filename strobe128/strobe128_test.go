package strobe128

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestConformance(t *testing.T) {
	s1 := New([]byte("Conformance Test Protocol"))

	msg := make([]byte, 1024)
	for i := range msg {
		msg[i] = byte(99)
	}

	s1.MetaAD([]byte("ms"), false)
	s1.MetaAD([]byte("g"), true)
	s1.AD(msg, false)

	prf1 := make([]byte, 32)
	s1.MetaAD([]byte("prf"), false)
	s1.PRF(prf1, false)

	// Generated by reference impl in Rust.
	exp := "b48e645ca17c667fd5206ba57a6a228d72d8e1903814d3f17f622996d7cfefb0"
	got := hex.EncodeToString(prf1)
	require.Equal(t, exp, got)

	s1.MetaAD([]byte("key"), false)
	s1.key(prf1, false)

	prf1 = make([]byte, 32)
	s1.MetaAD([]byte("prf"), false)
	s1.PRF(prf1, false)

	// Generated by reference impl in Rust.
	exp = "07e45cce8078cee259e3e375bb85d75610e2d1e1201c5f645045a194edd49ff8"
	got = hex.EncodeToString(prf1)
	require.Equal(t, exp, got)

}
